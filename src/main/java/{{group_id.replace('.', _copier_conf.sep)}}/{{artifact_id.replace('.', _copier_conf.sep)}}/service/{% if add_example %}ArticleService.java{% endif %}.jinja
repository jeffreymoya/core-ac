package {{group_id}}.{{artifact_id}}.service;

import {{group_id}}.{{artifact_id}}.config.auth.P8CAuthenticationContextImpl;
import {{group_id}}.{{artifact_id}}.entity.Article;
{% if add_kafka and kafka_add_example %}import {{group_id}}.{{artifact_id}}.kafka.producer.KafkaProducerService;
{% endif %}{% if add_database %}import {{group_id}}.{{artifact_id}}.repository.ArticleJpaRepository;
import {{group_id}}.{{artifact_id}}.repository.ArticleRepository;{% endif %}
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;

import java.util.List;{% if not add_database %}
import java.util.Arrays;{% endif %}

@Log4j2
@Service
public class ArticleService {

    private final P8CAuthenticationContextImpl authContext;
{% if add_database %}    private final ArticleRepository repo;
    private final ArticleJpaRepository jpaRepo;
{% endif %}{% if add_kafka and kafka_add_example %}    private final KafkaProducerService kafkaProducerService;{% endif %}

    public static final String PROCESS_ARTICLES_MESSAGE = "Article test value";

    public ArticleService(P8CAuthenticationContextImpl authContext{% if add_database %},
                          ArticleRepository repo,
                          ArticleJpaRepository jpaRepo{% endif %}{% if add_kafka and kafka_add_example %},
                          KafkaProducerService kafkaProducerService{% endif %}) {
        this.authContext = authContext;
{% if add_database %}        this.repo = repo;
        this.jpaRepo = jpaRepo;
{% endif %}{% if add_kafka and kafka_add_example %}        this.kafkaProducerService = kafkaProducerService;
{% endif %}    }

{% if not add_database %}
    public List<Article> articles = Arrays.asList(new Article(1, "First article"), new Article(2, "Second article"), new Article(3, "Third article"));
{% endif %}
    public List<Article> getAllArticles() {
        if (this.authContext.isAdmin()) {
            log.info("Retrieving articles for user with admin role");
        } else {
            log.info("Retrieving articles for user without admin role");
        }

        String username = this.authContext.getUsername();
        List<String> groups = this.authContext.getUserGroups();
        List<String> hierarchies = this.authContext.getUserHierarchies();
        log.info("Logged in user {} from groups {} and group hierarchies {}", username, groups, hierarchies);

{% if add_database %}        return repo.findAll();{% else %}        return this.articles;{% endif %}
    }

    public Article fetchById(Integer id) {
{% if add_database %}        return this.jpaRepo.findById(id).orElse(null);{% else %}        return this.articles.stream().filter(article -> article.getId().equals(id)).findFirst().orElse(null);{% endif %}
    }

{% if add_kafka and kafka_add_example and not add_kafka_schema_registry %}    public void processArticles() {
        this.kafkaProducerService.sendMessage(PROCESS_ARTICLES_MESSAGE);
    }
{% endif %}
}
